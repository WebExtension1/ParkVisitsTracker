/* Users */

CREATE TABLE If Not Exists Users (
    userID int NOT NULL AUTO_INCREMENT,
    username text NOT NULL,
    email text NOT NULL,
    password text NOT NULL,
    registerDate datetime NOT NULL DEFAULT NOW(),
    visibility text NOT NULL,
    bio text,
    PRIMARY KEY (userID ASC)
);

CREATE TABLE If Not Exists Followings (
    follower int NOT NULL,
    following int NOT NULL,
    FOREIGN KEY (follower) REFERENCES Users (userID),
    FOREIGN KEY (following) REFERENCES Users (userID)
);

CREATE TABLE If Not Exists Blocks (
    blocker int NOT NULL,
    blocked int NOT NULL,
    FOREIGN KEY (blocker) REFERENCES Users (userID),
    FOREIGN KEY (blocked) REFERENCES Users (userID)
);

CREATE TABLE If Not Exists Friends (
    friendA int NOT NULL,
    friendB int NOT NULL,
    FOREIGN KEY (friendA) REFERENCES Users (userID),
    FOREIGN KEY (friendB) REFERENCES Users (userID)
);

CREATE TABLE If Not Exists FriendRequests (
    requestedBy int NOT NULL,
    requestedTo int NOT NULL,
    FOREIGN KEY (requestedBy) REFERENCES Users (userID),
    FOREIGN KEY (requestedTo) REFERENCES Users (userID)
);

CREATE TABLE If Not Exists SocialTypes (
    socialTypeID int NOT NULL AUTO_INCREMENT,
    socialName text NOT NULL,
    PRIMARY KEY (socialTypeID ASC)
);
INSERT INTO SocialTypes (socialName) VALUES
("Youtube"),
("Twitter"),
("Facebook"),
("Instagram"),
("Twitch"),
("Reddit"),
("Tiktok"),
("Steam"),
("Xbox"),
("PSN");

CREATE TABLE If Not Exists UserSocials (
    userID int NOT NULL,
    socialTypeID int NOT NULL,
    link text NOT NULL,
    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (socialTypeID) REFERENCES SocialTypes (socialTypeID)
);

CREATE TABLE If Not Exists ReportReasons (
    reportReasonID int NOT NULL AUTO_INCREMENT,
    reasonName text NOT NULL,
    PRIMARY KEY (reportReasonID ASC)
);
INSERT INTO ReportReasons (reasonName) VALUES 
("Inappropriate Username"),
("Inappropriate Bio"),
("Inappropriate Profile Picture");

CREATE TABLE If Not Exists Reports (
    reportID int NOT NULL AUTO_INCREMENT,
    reportReasonID int NOT NULL,
    reportedBy int NOT NULL,
    reported int NOT NULL,
    explanation text,
    PRIMARY KEY (reportID ASC),
    FOREIGN KEY (reportReasonID) REFERENCES ReportReasons (reportReasonID),
    FOREIGN KEY (reportedBy) REFERENCES Users (userID),
    FOREIGN KEY (reported) REFERENCES Users (userID)
);

/* Recipes */

CREATE TABLE If Not Exists Recipes (
    recipeID int NOT NULL AUTO_INCREMENT,
    recipeName text NOT NULL,
    description text,
    time time,
    minServe int,
    maxServe int,
    PRIMARY KEY (recipeID ASC)
);

CREATE TABLE If Not Exists Ingredients (
    ingredientID int NOT NULL AUTO_INCREMENT,
    ingredientName text NOT NULL,
    PRIMARY KEY (ingredientID ASC)
);

CREATE TABLE If Not Exists IngredientStorage (
    ingredientID int NOT NULL,
    amount text NOT NULL,
    FOREIGN KEY (ingredientID) REFERENCES Ingredients (ingredientID)
);

CREATE TABLE If Not Exists RecipeIngredients (
    recipeID int NOT NULL,
    ingredientID int NOT NULL,
    amount text NOT NULL,
    FOREIGN KEY (recipeID) REFERENCES Recipes (recipeID),
    FOREIGN KEY (ingredientID) REFERENCES Ingredients (ingredientID)
);

CREATE TABLE If Not Exists RecipeSteps (
    recipeID int NOT NULL,
    stepNumber int NOT NULL,
    explanation text NOT NULL,
    FOREIGN KEY (recipeID) REFERENCES Recipes (recipeID)
);

CREATE TABLE If Not Exists RecipeStorage (
    recipeID int NOT NULL,
    amount int NOT NULL,
    FOREIGN KEY (recipeID) REFERENCES Recipes (recipeID)
);

/* Games */

CREATE TABLE If Not Exists GameCompletionTypes (
    completionTypeID int NOT NULL AUTO_INCREMENT,
    completionType text NOT NULL,
    PRIMARY KEY (completionTypeID ASC)
);
INSERT INTO GameCompletionTypes (completionType) VALUES
("Platinum, not 100%"),
("Platinum and 100%"),
("100%");

CREATE TABLE If Not Exists Games (
    gameID int NOT NULL AUTO_INCREMENT,
    gameName text NOT NULL,
    PRIMARY KEY (gameID ASC)
);

CREATE TABLE If Not Exists GamePlatforms (
    platformID int NOT NULL AUTO_INCREMENT,
    platformName text NOT NULL,
    PRIMARY KEY (platformID ASC)
);
INSERT INTO `gameplatforms`(`platformName`) VALUES
("Wii"),
("Xbox 360"),
("Xbox One"),
("Xbox Series X"),
("PC"),
("Playstation 1"),
("Playstation 2"),
("Playstation 3"),
("Playstation 4"),
("Playstation 5"),
("PSP"),
("PSVR"),
("PSVR2");

CREATE TABLE If Not Exists GamePSNP (
    gameID int NOT NULL,
    id int NOT NULL,
    PSN float NOT NULL,
    PSNP float NOT NULL,
    hasPlatinum tinyint NOT NULL,
    attainable tinyint NOT NULL,
    platformID int NOT NULL,
    FOREIGN KEY (gameID) REFERENCES Games (gameID),
    FOREIGN KEY (platformID) REFERENCES GamePlatforms (platformID)
);

CREATE TABLE If Not Exists GameFormats (
    formatID int NOT NULL AUTO_INCREMENT,
    formatName text NOT NULL,
    PRIMARY KEY (formatID ASC)
);
INSERT INTO `gameformats`(`formatName`) VALUES
("Physical"),
("Digital"),
("Subscription");

CREATE TABLE If Not Exists GameCEX (
    gameID int NOT NULL,
    id int NOT NULL,
    platformID int NOT NULL,
    cash float NOT NULL,
    voucher float NOT NULL,
    FOREIGN KEY (gameID) REFERENCES Games (gameID),
    FOREIGN KEY (platformID) REFERENCES GamePlatforms (platformID)
);

CREATE TABLE If Not Exists GameGuides (
    gameID int NOT NULL,
    link text,
    difficulty int NOT NULL,
    hours int NOT NULL,
    FOREIGN KEY (gameID) REFERENCES Games (gameID)
);

CREATE TABLE If Not Exists GameInLibrary (
    gameInLibraryID int NOT NULL AUTO_INCREMENT,
    gameID int NOT NULL,
    platformID int NOT NULL,
    formatID int NOT NULL,
    owner int NOT NULL,
    PRIMARY KEY (gameInLibraryID ASC),
    FOREIGN KEY (gameID) REFERENCES Games (gameID),
    FOREIGN KEY (platformID) REFERENCES GamePlatforms (platformID),
    FOREIGN KEY (formatID) REFERENCES GameFormats (formatID),
    FOREIGN KEY (owner) REFERENCES Users (userID)
);

CREATE TABLE If Not Exists PhysicalGameOwner (
    gameInLibraryID int NOT NULL,
    userID int NOT NULL,
    FOREIGN KEY (gameInLibraryID) REFERENCES GameInLibrary (gameInLibraryID),
    FOREIGN KEY (userID) REFERENCES Users (userID)
);

CREATE TABLE If Not Exists GameCompleted (
    gameID int NOT NULL,
    userID int NOT NULL,
    completionTypeID int NOT NULL,
    FOREIGN KEY (gameID) REFERENCES Games (gameID),
    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (completionTypeID) REFERENCES GameCompletionTypes (completionTypeID)
);

CREATE TABLE If Not Exists GameNotes (
    gameID int NOT NULL,
    userID int NOT NULL,
    notes text NOT NULL,
    FOREIGN KEY (gameID) REFERENCES Games (gameID),
    FOREIGN KEY (userID) REFERENCES Users (userID)
);

CREATE TABLE If Not Exists GameWishlist (
    gameID int NOT NULL,
    platformID int NOT NULL,
    formatID int NOT NULL,
    userID int NOT NULL,
    FOREIGN KEY (gameID) REFERENCES Games (gameID),
    FOREIGN KEY (platformID) REFERENCES GamePlatforms (platformID),
    FOREIGN KEY (formatID) REFERENCES GameFormats (formatID),
    FOREIGN KEY (userID) REFERENCES Users (userID)
);

CREATE TABLE If Not Exists GameSuggestions (
    name text NOT NULL
);

/* Concerts */

CREATE TABLE If Not Exists Bands (
    bandID int NOT NULL AUTO_INCREMENT,
    bandName text NOT NULL,
    PRIMARY KEY (bandID ASC)
);

CREATE TABLE If Not Exists BandExternalLinks (
    bandID int NOT NULL,
    link text NOT NULL,
    FOREIGN KEY (bandID) REFERENCES Bands (bandID)
);

CREATE TABLE If Not Exists Albums (
    albumID int NOT NULL AUTO_INCREMENT,
    albumName text NOT NULL,
    bandID int NOT NULL,
    PRIMARY KEY (albumID ASC),
    FOREIGN KEY (bandID) REFERENCES Bands (bandID)    
);

CREATE TABLE If Not Exists AlbumExternalLinks (
    albumID int NOT NULL,
    link text NOT NULL,
    FOREIGN KEY (albumID) REFERENCES Albums (albumID)
);

CREATE TABLE If Not Exists Tours (
    tourID int NOT NULL AUTO_INCREMENT,
    tourName text NOT NULL,
    PRIMARY KEY (tourID ASC)
);

CREATE TABLE If Not Exists TourAlbums (
    tourID int NOT NULL,
    albumID int NOT NULL,
    FOREIGN KEY (tourID) REFERENCES Tours (tourID),
    FOREIGN KEY (albumID) REFERENCES Albums (albumID)
);

CREATE TABLE If Not Exists Cities (
    cityID int NOT NULL AUTO_INCREMENT,
    cityName text NOT NULL,
    PRIMARY KEY (cityID ASC)
);

CREATE TABLE If Not Exists Venues (
    venueID int NOT NULL AUTO_INCREMENT,
    venueName text NOT NULL,
    cityID int NOT NULL,
    PRIMARY KEY (venueID ASC),
    FOREIGN KEY (cityID) REFERENCES Cities (cityID)
);

CREATE TABLE If Not Exists VenueExternalLinks (
    venueID int NOT NULL,
    link text NOT NULL,
    FOREIGN KEY (venueID) REFERENCES Venues (venueID)
);

CREATE TABLE If Not Exists Concerts (
    concertID int NOT NULL AUTO_INCREMENT,
    venueID int NOT NULL,
    concertName text NOT NULL,
    date datetime NOT NULL,
    PRIMARY KEY (concertID ASC),
    FOREIGN KEY (venueID) REFERENCES Venues (venueID)
);

CREATE TABLE If Not Exists ConcertExternalLinks (
    concertID int NOT NULL,
    link text NOT NULL,
    FOREIGN KEY (concertID) REFERENCES Concerts (concertID)
);

CREATE TABLE If Not Exists ConcertLink (
    concertID int NOT NULL,
    userID int NOT NULL,
    FOREIGN KEY (concertID) REFERENCES Concerts (concertID),
    FOREIGN KEY (userID) REFERENCES Users (userID)
);

CREATE TABLE If Not Exists TourLink (
    concertID int NOT NULL,
    tourID int NOT NULL,
    FOREIGN KEY (concertID) REFERENCES Concerts (concertID),
    FOREIGN KEY (tourID) REFERENCES Tours (tourID)
);

CREATE TABLE If Not Exists Songs (
    songID int NOT NULL AUTO_INCREMENT,
    songName text NOT NULL,
    PRIMARY KEY (songID ASC)
);

CREATE TABLE If Not Exists SongExternalLinks (
    songID int NOT NULL,
    link text NOT NULL,
    FOREIGN KEY (songID) REFERENCES Songs (songID)
);

CREATE TABLE If Not Exists SongBands (
    songID int NOT NULL,
    bandID int NOT NULL,
    FOREIGN KEY (songID) REFERENCES Songs (songID),
    FOREIGN KEY (bandID) REFERENCES Bands (bandID)
);

CREATE TABLE If Not Exists AlbumLink (
    albumID int NOT NULL,
    songID int NOT NULL,
    position int NOT NULL,
    FOREIGN KEY (albumID) REFERENCES Albums (albumID),
    FOREIGN KEY (songID) REFERENCES Songs (songID)
);

CREATE TABLE If Not Exists Setlists (
    setlistID int NOT NULL AUTO_INCREMENT,
    setlistName text NOT NULL,
    PRIMARY KEY (setlistID ASC)
);

CREATE TABLE If Not Exists SetlistLink (
    concertID int NOT NULL,
    setlistID int NOT NULL,
    position int NOT NULL,
    FOREIGN KEY (concertID) REFERENCES Concerts (concertID),
    FOREIGN KEY (setlistID) REFERENCES Setlists (setlistID)
);

CREATE TABLE If Not Exists SongLink (
    setlistID int NOT NULL,
    songID int NOT NULL,
    position int NOT NULL,
    FOREIGN KEY (setlistID) REFERENCES Setlists (setlistID),
    FOREIGN KEY (songID) REFERENCES Songs (songID)
);

CREATE TABLE If Not Exists SetlistBreaks (
    setlistID int NOT NULL,
    name text NOT NULL,
    position int NOT NULL,
    FOREIGN KEY (setlistID) REFERENCES Setlists (setlistID)
);

CREATE TABLE If Not Exists SetlistExternalLinks (
    setlistID int NOT NULL,
    link text NOT NULL,
    FOREIGN KEY (setlistID) REFERENCES Setlists (setlistID)
);

/* Theme Parks */

CREATE TABLE If Not Exists Locations (
    locationID int NOT NULL AUTO_INCREMENT,
    country text NOT NULL,
    region text NOT NULL,
    PRIMARY KEY (locationID ASC)
);

CREATE TABLE If Not Exists Parks (
    parkID int NOT NULL AUTO_INCREMENT,
    parkName text NOT NULL,
    locationID int NOT NULL,
    PRIMARY KEY (parkID ASC),
    FOREIGN KEY (locationID) REFERENCES Locations (locationID)
);

CREATE TABLE If Not Exists ParkGroups (
    parkGroupID int NOT NULL AUTO_INCREMENT,
    parkGroupName text NOT NULL,
    PRIMARY KEY (parkGroupID ASC)
);

CREATE TABLE If Not Exists ParkGroupParks (
    parkID int NOT NULL,
    parkGroupID INT not null,
    FOREIGN KEY (parkID) REFERENCES Parks (parkID),
    FOREIGN KEY (parkGroupID) REFERENCES ParkGroups (parkGroupID)
);

CREATE TABLE If Not Exists ParkExternalLinks (
    parkID int NOT NULL,
    link text NOT NULL,
    FOREIGN KEY (parkID) REFERENCES Parks (parkID)
);

CREATE TABLE If Not Exists NewParks (
    userID int NOT NULL,
    newParkName text NOT NULL,
    description text NOT NULL,
    FOREIGN KEY (userID) REFERENCES Users (userID)
);

CREATE TABLE If Not Exists NewAttractions (
    userID int NOT NULL,
    newAttractionName text NOT NULL,
    parkID int NOT NULL,
    description text NOT NULL,
    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (parkID) REFERENCES Parks (parkID)
);

CREATE TABLE If Not Exists Visits (
    visitID int NOT NULL AUTO_INCREMENT,
    createdBy int NOT NULL,
    date date NOT NULL,
    PRIMARY KEY (visitID),
    FOREIGN KEY (createdBy) REFERENCES Users (userID)
);

CREATE TABLE If Not Exists VisitPark (
    visitID int NOT NULL,
    parkID int NOT NULL,
    arrivalTime time,
    departureTime time,
    position int NOT NULL,
    FOREIGN KEY (visitID) REFERENCES Visits (visitID),
    FOREIGN KEY (parkID) REFERENCES Parks (parkID)
);

CREATE TABLE If Not Exists VisitLink (
    visitID int NOT NULL,
    userID int NOT NULL,
    FOREIGN KEY (visitID) REFERENCES Visits (visitID),
    FOREIGN KEY (userID) REFERENCES Users (userID)
);

CREATE TABLE If Not Exists ParkClosing (
    parkID int NOT NULL,
    day int,
    month int,
    year int,
    FOREIGN KEY (parkID) REFERENCES Parks (parkID)
);

CREATE TABLE If Not Exists ParkOpening (
    parkID int NOT NULL,
    day int,
    month int,
    year int,
    FOREIGN KEY (parkID) REFERENCES Parks (parkID)
);

CREATE TABLE If Not Exists Regions (
    regionID int NOT NULL AUTO_INCREMENT,
    regionName text NOT NULL,
    parkID int NOT NULL,
    PRIMARY KEY (regionID ASC),
    FOREIGN KEY (parkID) REFERENCES Parks (parkID)
);

CREATE TABLE If Not Exists RegionClosing (
    parkID int NOT NULL,
    day int,
    month int,
    year int,
    FOREIGN KEY (parkID) REFERENCES Parks (parkID)
);

CREATE TABLE If Not Exists RegionOpening (
    parkID int NOT NULL,
    day int,
    month int,
    year int,
    FOREIGN KEY (parkID) REFERENCES Parks (parkID)
);

CREATE TABLE If Not Exists RegionReplacement (
    oldRegion int NOT NULL,
    newRegion int NOT NULL,
    FOREIGN KEY (oldRegion) REFERENCES Regions (regionID),
    FOREIGN KEY (newRegion) REFERENCES Regions (regionID)
);

CREATE TABLE If Not Exists RegionExternalLinks (
    regionID int NOT NULL,
    link text NOT NULL,
    FOREIGN KEY (regionID) REFERENCES Regions (regionID)
);

CREATE TABLE If Not Exists AttractionTypes (
    attractionTypeID int NOT NULL AUTO_INCREMENT,
    attractionTypeName text NOT NULL,
    PRIMARY KEY (attractionTypeID ASC)
);
INSERT INTO AttractionTypes (attractionTypeName) VALUES
("Rollercoaster"),
("Flat Ride"),
("Trackless Ride"),
("Motion Simulator"),
("Show"),
("Shop"),
("Restaurant");

CREATE TABLE If Not Exists Attractions (
    attractionID int NOT NULL AUTO_INCREMENT,
    attractionName text NOT NULL,
    attractionTypeID int NOT NULL,
    regionID int NOT NULL,
    PRIMARY KEY (attractionID ASC),
    FOREIGN KEY (attractionTypeID) REFERENCES AttractionTypes (attractionTypeID),
    FOREIGN KEY (regionID) REFERENCES Regions (regionID)
);

CREATE TABLE If Not Exists AttractionGroups (
    attractionGroupID int NOT NULL AUTO_INCREMENT,
    attractionGroupName text NOT NULL,
    PRIMARY KEY (attractionGroupID ASC)
);

CREATE TABLE If Not Exists AttractionGroupLinks (
    attractionGroupID int NOT NULL,
    attractionID int NOT NULL,
    FOREIGN KEY (attractionGroupID) REFERENCES AttractionGroups (attractionGroupID),
    FOREIGN KEY (attractionID) REFERENCES Attractions (attractionID)
);

CREATE TABLE If Not Exists Manufacturers (
    manufacturerID int NOT NULL,
    manufacturerName text NOT NULL,
    PRIMARY KEY (manufacturerID ASC)
);

CREATE TABLE If Not Exists Models (
    modelID int NOT NULL,
    modelName text NOT NULL,
    manufacturerID int NOT NULL,
    PRIMARY KEY (modelID ASC),
    FOREIGN KEY (manufacturerID) REFERENCES Manufacturers (manufacturerID)
);

CREATE TABLE If Not Exists AttractionModel (
    attractionID int NOT NULL,
    modelID int NOT NULL,
    FOREIGN KEY (attractionID) REFERENCES Attractions (attractionID),
    FOREIGN KEY (modelID) REFERENCES Models (modelID)
);

CREATE TABLE If Not Exists AttractionManufacturers (
    attractionID int NOT NULL,
    manufacturerID int NOT NULL,
    FOREIGN KEY (attractionID) REFERENCES Attractions (attractionID),
    FOREIGN KEY (manufacturerID) REFERENCES Manufacturers (manufacturerID)
);

CREATE TABLE If Not Exists ManufacturerClosing (
    manufacturerID int NOT NULL,
    day int,
    month int,
    year int,
    FOREIGN KEY (manufacturerID) REFERENCES Manufacturers (manufacturerID)
);

CREATE TABLE If Not Exists ManufacturerOpening (
    manufacturerID int NOT NULL,
    day int,
    month int,
    year int,
    FOREIGN KEY (manufacturerID) REFERENCES Manufacturers (manufacturerID)
);

CREATE TABLE If Not Exists ManufacturerReplacement (
    oldManufacturer int NOT NULL,
    newManufacturer int NOT NULL,
    FOREIGN KEY (oldManufacturer) REFERENCES Manufacturers (manufacturerID),
    FOREIGN KEY (newManufacturer) REFERENCES Manufacturers (manufacturerID)
);
CREATE TABLE If Not Exists AttractionExternalLinks (
    attractionID int NOT NULL,
    link text NOT NULL,
    FOREIGN KEY (attractionID) REFERENCES Attractions (attractionID)
);

CREATE TABLE If Not Exists AttractionClosing (
    parkID int NOT NULL,
    day int,
    month int,
    year int,
    FOREIGN KEY (parkID) REFERENCES Parks (parkID)
);

CREATE TABLE If Not Exists AttractionOpening (
    parkID int NOT NULL,
    day int,
    month int,
    year int,
    FOREIGN KEY (parkID) REFERENCES Parks (parkID)
);

CREATE TABLE If Not Exists AttractionReplacement (
    oldAttraction int NOT NULL,
    newAttraction int NOT NULL,
    FOREIGN KEY (oldAttraction) REFERENCES Attractions (attractionID),
    FOREIGN KEY (newAttraction) REFERENCES Attractions (attractionID)
);

/* Discography */

CREATE TABLE If Not Exists DiscographyBands (
    bandID int NOT NULL AUTO_INCREMENT,
    bandName text NOT NULL,
    PRIMARY KEY (bandID ASC)
);

CREATE TABLE If Not Exists DiscographySongs (
    songID int NOT NULL AUTO_INCREMENT,
    bandID int NOT NULL,
    songName text NOT NULL,
    PRIMARY KEY (songID ASC),
    FOREIGN KEY (bandID) REFERENCES DiscographyBands (bandID)
);

CREATE TABLE If Not Exists DiscographyCovers (
    songID int NOT NULL,
    originalArtist text NOT NULL,
    FOREIGN KEY (songID) REFERENCES DiscographySongs (songID)
);

CREATE TABLE If Not Exists DiscographyReleaseTypes (
    releaseTypeID int NOT NULL AUTO_INCREMENT,
    releaseTypeName text NOT NULL,
    PRIMARY KEY (releaseTypeID ASC)
);
INSERT INTO DiscographyReleaseTypes (releaseTypeID) VALUES
("Album"),
("EP"),
("Single");

CREATE TABLE If Not EXISTS DiscographyAlbums (
    albumID int NOT NULL AUTO_INCREMENT,
    albumName text NOT NULL,
    bandID int NOT NULL,
    releaseTypeID int NOT NULL,
    PRIMARY KEY (albumID ASC),
    FOREIGN KEY (bandID) REFERENCES DiscographyBands (bandID),
    FOREIGN KEY (releaseTypeID) REFERENCES DiscographyReleaseTypes (releaseTypeID)
);

CREATE TABLE If Not Exists DiscographyTypes (
    typeID int NOT NULL AUTO_INCREMENT,
    typeName text NOT NULL,
    PRIMARY KEY (typeID ASC)
);
INSERT INTO DiscographyTypes (typeName) VALUES
("Studio"),
("Acoustic"),
("Full Band"),
("Other"),
("Cover"),
("Demo"),
("Concert"),
("Live");

CREATE TABLE If Not Exists DiscographyVersions (
    versionID int NOT NULL AUTO_INCREMENT,
    songID int NOT NULL,
    PRIMARY KEY (versionID ASC),
    FOREIGN KEY (songID) REFERENCES DiscographySongs (songID)
);

CREATE TABLE If Not Exists DiscographyMediaTypes (
    mediaTypeID int NOT NULL AUTO_INCREMENT,
    mediaTypeName text NOT NULL,
    PRIMARY KEY (mediaTypeID ASC)
);
INSERT INTO DiscographyMediaTypes (mediaTypeName) VALUES
("Audio"),
("Music Video"),
("Performance Video");

CREATE TABLE If Not Exists DiscographyReleases (
    releaseID int NOT NULL AUTO_INCREMENT,
    versionID int NOT NULL,
    mediaTypeID int NOT NULL,
    link text NOT NULL,
    official tinyint NOT NULL,
    year int NOT NULL,
    month int NOT NULL,
    day int NOT NULL,
    PRIMARY KEY (releaseID ASC),
    FOREIGN KEY (versionID) REFERENCES DiscographyVersions (versionID),
    FOREIGN KEY (mediaTypeID) REFERENCES DiscographyMediaTypes (mediaTypeID)
);

CREATE TABLE If Not Exists DiscographyReleaseAlbums (
    releaseID int NOT NULL,
    albumID int NOT NULL,
    primaryRelease tinyint NOT NULL,
    FOREIGN KEY (releaseID) REFERENCES DiscographyReleases (releaseID),
    FOREIGN KEY (albumID) REFERENCES DiscographyAlbums (albumID)
);

CREATE TABLE If Not Exists DiscographyVersionTypes (
    versionID int NOT NULL,
    typeID int NOT NULL,
    FOREIGN KEY (versionID) REFERENCES DiscographyVersions (versionID),
    FOREIGN KEY (typeID) REFERENCES DiscographyTypes (typeID)
);